{"version":3,"sources":["actions/contactAction.js","actions/actionTypes.js","components/List.js","components/Form.js","components/Home.js","components/Edit.js","App.js","serviceWorker.js","reducers/contactReducer.js","reducers/index.js","index.js"],"names":["createContact","contact","list","type","moveContact","List","props","state","name","data","index","className","key","id","checked","onChange","onCheck","to","onClick","e","deleteContact","this","toggleChecked","preventDefault","window","confirm","setTimeout","alert","map","i","renderListItem","Component","connect","ownProps","dispatch","contactAction","editContact","Form","handleChange","bind","handleSubmit","handleDropdownChange","selectAll","selectValue","setState","target","value","onSubmit","list1","list2","contacts","Home","Contact","match","params","Edit","path","component","App","basename","exact","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","idCount","Object","assign","checkedContact","action","combineReducers","filter","store","createStore","rootReducer","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6b73e89d.chunk.js","sourcesContent":["// contactAction.js\n\nimport * as actionTypes from './actionTypes';\n\nexport const createContact = (contact, list) => {\n  return {\n    type: actionTypes.CREATE_NEW_CONTACT,\n    contact: contact,\n    list: list\n  }\n};\n\nexport const deleteContact = (id) => {\n  return {\n    type: actionTypes.REMOVE_CONTACT,\n    id: id\n  }\n};\n\nexport const editContact = (id) => {\n  return {\n    type: actionTypes.EDIT_CONTACT,\n    id: id\n  }\n}\n\n// export const moveContact = (contact, checked, list) => {\nexport const moveContact = (contact) => {\n  return {\n    type: actionTypes.MOVE_CONTACT,\n    contact: contact,\n    // checked: checked,\n    // list: list,\n  }\n}\n\nexport const toggleChecked = (id) => {\n  return {\n    type: actionTypes.TOGGLE_CHECKED,\n    id: id,\n  }\n}\n\nexport const selectAll = () => {\n  return {\n    type: actionTypes.SELECT_ALL,\n  }\n}","// actionTypes.js\n\nexport const GET_ALL_CONTACTS = 'GET_ALL_CONTACTS';\nexport const CREATE_NEW_CONTACT = 'CREATE_NEW_CONTACT';\nexport const REMOVE_CONTACT = 'REMOVE_CONTACT';\nexport const EDIT_CONTACT = 'EDIT_CONTACT';\nexport const MOVE_CONTACT = 'MOVE_CONTACT';\nexport const TOGGLE_CHECKED = 'TOGGLE_CHECKED';\nexport const SELECT_ALL = 'SELECT_ALL';","// List.js\n\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as contactAction from '../actions/contactAction';\n\n\nclass List extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      name: ''\n    }\n  }\n\n  renderListItem(data, index){\n    return (\n      <div className=\"list-group-item clearfix pd-checkbox\" key={data.id}>\n        <div className=\"checkbox\">\n          <input type=\"checkbox\" className=\"checkbox-custom\" checked={data.checked} onChange={() => this.onCheck(data.id)}></input>\n          <label className=\"form-check-label list-data-item\">{data.name}</label>\n        </div>\n        <div className=\"list-buttons\">\n          <Link to={`/edit/${data.name}`} className=\"btn btn-info edit-button\">\n            Edit\n          </Link>\n          <button\n            onClick={(e) => \n            this.deleteContact(e, data.name, data.id)} \n            className=\"btn btn-danger delete-button\"\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  onCheck(id) {\n    this.props.toggleChecked(id);\n  }\n\n  deleteContact(e, name, id){\n    e.preventDefault();\n    if (window.confirm('Are you sure you wish to delete this item?')) {\n      this.props.deleteContact(id);\n      setTimeout(() => {\n        alert(`Successful deletion of \"${name}\" at index ${id}`);\n      }, 300);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"results-list\">\n        {this.props.list.map((contact, i) => this.renderListItem(contact, i))}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    // contacts: state.contacts.list1\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createContact: contact => dispatch(contactAction.createContact(contact)),\n    editContact: index => dispatch(contactAction.editContact(index)),\n    deleteContact: contact => dispatch(contactAction.deleteContact(contact)),\n    toggleChecked: id => dispatch(contactAction.toggleChecked(id)),\n    moveContact: contact => dispatch(contactAction.moveContact(contact)),\n  }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","// Form.js\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as contactAction from '../actions/contactAction';\nimport List from './List.js';\n\nclass Form extends Component {\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDropdownChange = this.handleDropdownChange.bind(this);\n    this.selectAll = this.selectAll.bind(this);\n    this.moveContact = this.moveContact.bind(this);\n\n    this.state = {\n      name: '',\n      selectValue: \"list1\"\n    }\n  }\n\n  handleChange(e){\n    this.setState({\n      name: e.target.value,\n    })\n  }\n\n  handleSubmit(e){\n    e.preventDefault();\n    let contact = {\n      name: this.state.name,\n    }\n    this.props.createContact(contact, this.state.selectValue);\n  }\n\n  handleDropdownChange(e) {\n    this.setState({ selectValue: e.target.value });\n  }\n \n  selectAll() {\n    this.props.selectAll();\n  }\n\n  moveContact() {\n    this.props.moveContact();\n  }\n\n  render() {\n    return (\n        <div>\n          <div className=\"contacts-form-results\">\n            <h3>Add Contact</h3>\n            <form onSubmit={this.handleSubmit}>\n              <input type=\"text\" onChange={this.handleChange} className=\"form-control\" value={this.state.name}/>\n            \n              <select \n                id=\"dropdown\"\n                name=\"select-list\"\n                onChange={this.handleDropdownChange}\n              > \n                <option className=\"option\" value=\"list1\">Add to List 1</option>\n                <option className=\"option\" value=\"list2\">Add to List 2</option>\n              </select>\n\n              <input type=\"submit\" className=\"btn btn-success add-button\" value=\"Add Contact\"/>\n            </form>\n            <p>Selected value is : {this.state.selectValue}</p>\n\n            <button className=\"btn feature-button\" onClick={this.moveContact}>Move</button>\n            <button className=\"btn feature-button\" onClick={this.selectAll}>Select All</button>\n            <hr />\n\n            <div className=\"results-table\">\n              <div className=\"column\">\n                <h3>List 1</h3>\n                <List list={this.props.list1} />\n              </div>\n\n              <div className=\"column\">\n                <h3>List 2</h3>\n                <List list={this.props.list2} />\n              </div>\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\n// const mapStateToProps = (state, ownProps) => {\nconst mapStateToProps = (state) => {\n  return {\n    list1: state.contacts.list1,\n    list2: state.contacts.list2,\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createContact: (contact, list) => dispatch(contactAction.createContact(contact, list)),\n    selectAll: () => dispatch(contactAction.selectAll()),\n    moveContact: () => dispatch(contactAction.moveContact()),\n  }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","// Home.js\n\nimport React, { Component } from 'react';\nimport Form from './Form.js';\n\nclass Home extends Component {\n  render() {\n    return (\n        <div>\n          <Form />\n        </div>\n    );\n  }\n}\n\n\nexport default Home;","// Edit.js\n\nimport React, { Component } from 'react';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nclass Edit extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <h2>Edit</h2>\n          <p>Item is \"<Route path=\"/edit/:id\" component={Contact} />\"</p>\n        </div>\n      </Router>\n    );\n  }\n}\n\nfunction Contact({ match }) {\n  return (\n    <span>{match.params.id}</span>\n  );\n}\n\nexport default Edit;","// App.js\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Edit from './components/Edit';\n\nclass App extends Component {\n  render() {\n    return(\n      <Router basename=\"/\">\n        <div className=\"frame\">\n          <h1>Clientside Contacts Application</h1>\n          <hr />\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/edit/:id\" component={Edit} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// contactReducer.js\n\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  list1: [],\n  list2: [],\n};\n\nlet idCount = 0;\n\nfunction createContact(contact) {\n  return Object.assign({}, contact, {\n    id: idCount ++,\n    checked: false,\n  })\n}\n\nfunction checkedContact(contact, action) {\n  if (contact.id === action.id) {\n    return {\n      ...contact,\n      checked: !contact.checked,\n    };\n  } else {\n    return contact;\n  }\n}\n\nfunction selectAll(contact) {\n return {\n   ...contact,\n   checked: true,\n }\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type){\n\n      case actionTypes.CREATE_NEW_CONTACT:\n        if (action.list === \"list1\") {\n          return {\n            ...state,\n            list1: [\n              ...state.list1,\n              createContact(action.contact)\n            ]\n          }          \n        } else {\n          return {\n            ...state,\n            list2: [\n              ...state.list2,\n              createContact(action.contact)\n            ]\n          };\n        }\n\n      case actionTypes.REMOVE_CONTACT:\n        return {\n          ...state,\n          // if contact is in list 1, then:\n          list1: state.list1.filter(data => data.id !== action.id),\n          // else contact is in list 2, then\n          list2: state.list2.filter(data => data.id !== action.id)\n        };\n\n      case actionTypes.EDIT_CONTACT:\n        return state;\n\n      case actionTypes.MOVE_CONTACT:\n        // if the contact is in list 1\n        // then remove the item from list 1\n        // add item to list 2\n\n        // if (contact.id === action.id) {\n        //   console.log(\"test test move contact\", action.id);\n        // }\n\n        console.log(\"test test move contact\", action.id);\n\n        return state;\n        // if the contact is in list 2\n        // then remove the item from list 2\n        // add item to list 1\n\n\n      case actionTypes.TOGGLE_CHECKED:\n        return {\n          ...state,\n          list1: state.list1.map(\n            contact => checkedContact(contact, action)\n          ),    \n          list2: state.list2.map(\n            contact => checkedContact(contact, action)\n          )\n        }\n\n      case actionTypes.SELECT_ALL:\n        return {\n          ...state,\n          list1: state.list1.map(\n            contact => selectAll(contact)\n          ),    \n          list2: state.list2.map(\n            contact => selectAll(contact)\n          )\n        }\n\n      default:\n        return state;\n    }\n  };\n\n  // Change the Edit function case as above","// index.js\n\nimport { combineReducers } from 'redux';\nimport contacts from './contactReducer';\n\nexport default combineReducers({\n    contacts: contacts\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\nimport { createStore } from 'redux';\n\n\nconst store=createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}